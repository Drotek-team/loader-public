[tool.poetry]
name = "loader"
version = "0.7.2"
description = ""
authors = [
    "Thomas PERRIN <thomas.perrin@drotek.com>",
    "Jonathan PLASSE <jonathan.plasse@drotek.com>",
]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.8,<3.11.0"
numpy = "^1.24.2"
pydantic = "^2.1.1"
tqdm = "^4.65.0"
scipy = "1.10.1"

[tool.poetry.group.dev.dependencies]
commitizen = "^2.42.0"
hypothesis = "^6.68.2"
pre-commit = "^3.1.0"
pydantic-to-typescript = "^1.0.10"
pyright = "^1.1.326"
pytest = "^7.2.1"
pytest-clarity = {git = "https://github.com/JonathanPlasse/pytest-clarity.git", rev = "pydantic-basemodel-support"}
pytest-cov = "^4.0.0"
pytest-examples = "^0.0.8"
pytest-xdist = "^3.2.0"
rope = "^1.7.0"
ruff = "^0.1.4"
scalene = "^1.5.31.1"
shapely = "^2.0.1"

[tool.commitizen]
version = "0.7.2"
version_files = ["pyproject.toml:version", "loader/__init__.py"]
tag_format = "v$version"
annotated_tag = true
major_version_zero = true
update_changelog_on_bump = true
pre_bump_hooks = ["python generate_iostar_json.py", "pytest -k test_readme --update-examples"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
target-version = ['py38']
line-length = 100

[tool.pyright]
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportUnusedExpression = false
reportUnusedImport = false
reportUnusedVariable = false
pythonVersion = "3.8"
exclude = ["**/__pycache__", "**/.*", "tests/test_readme.py"]

[tool.ruff] # https://github.com/charliermarsh/ruff#reference
target-version = "py38"
line-length = 100
src = ["loader"]
select = ["ALL"]
ignore = [
    "ANN101",  # missing-type-self
    "ANN102",  # missing-type-cls
    "D10",     # missing-docstring
    "E501",    # line-too-long
    "PLR0913", # too-many-arguments # TODO: Use dataclass instead
    "PLR2004", # magic-value-comparison
    "S101",    # assert-used

    # Selected in pre-commit # TODO(jonathan): Must be kept in sync
    "B007",   # unused-loop-control-variable
    "B021",   # f-string-docstring
    "ERA001", # commented-out-code
    "F401",   # unused-import
    "F541",   # f-string-missing-placeholders
    "F841",   # unused-variable
    "RUF100", # unused-noqa
    "T20",    # print-found

    # New
    "RUF012",
    "TD003",
    "FA100",  # future-rewritable-type-annotation
    "COM812",
    "ISC001",
]

[tool.ruff.isort]
split-on-trailing-comma = false

[tool.ruff.pep8-naming]
classmethod-decorators = ["pydantic.root_validator", "pydantic.validator"]

[tool.ruff.pydocstyle]
convention = "pep257"

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "csv"

[tool.ruff.per-file-ignores]
"tests/*.py" = ["SLF001"]

[tool.pytest.ini_options]
addopts = "--color=yes --exitfirst --failed-first --strict-config --strict-markers --junitxml=reports/pytest.xml"
filterwarnings = ["error"]
pythonpath = ["loader"]
xfail_strict = true

[tool.coverage.run] # https://coverage.readthedocs.io/en/latest/config.html#run
omit = ["tests/test_readme.py"]
branch = true
data_file = "reports/.coverage"

[tool.coverage.report] # https://coverage.readthedocs.io/en/latest/config.html#report
fail_under = 100
precision = 1
show_missing = true
skip_covered = true
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain if tests do not hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@overload",
]

[tool.coverage.xml] # https://coverage.readthedocs.io/en/latest/config.html#xml
output = "reports/coverage.xml"
